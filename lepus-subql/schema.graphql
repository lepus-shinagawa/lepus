# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

type StarterEntity @entity {
  id: ID! #id is a required field
  field1: Int!

  field2: String #filed2 is an optional field
  field3: BigInt

  field4: Date

  field5: Boolean
}

type Transfer @entity {
  id: ID! # id field is always required and must look like this
  amount: BigInt # Amount that is transferred
  blockNumber: BigInt # The block height of the transfer
  from: String! # The account that transfers are made from
  to: String! # The account that transfers are made to
}

type Account @entity {
  id: ID!
  totalTransferAmount: BigInt!
  nftForesightScore: BigInt!
}

type TofuNFT @entity {
  id: ID!
  ownerHistoryAccountIds: [ID]
}

type TofuNFTTransaction @entity {
  id: ID!
  tokenId: ID
}

type Contract @entity {
  id: ID! #SmartContractAddress
  totalReward: Float!
  totalStaked: Float!
  rewards: [DAppStakingReward] @derivedFrom(field: "contract")
  stakes: [BondAndStake] @derivedFrom(field: "contract")
  unstakes: [UnbondAndUnstake] @derivedFrom(field: "contract")
}

type DAppStakingReward @entity {
  id: ID! #blockHeight-eventIdx
  account: Account!
  contract: Contract!
  contractType: ContractType!
  reward: Float! #BalanceOf
  eraIndex: Int!
  timestamp: Date!
}

enum ContractType {
  EVM
  WASM
}

type Account2 @entity {
  id: ID! #address
  totalRewarded: Float!
  totalStaking: Float!
  rewards: [DAppStakingReward] @derivedFrom(field: "account")
  stakes: [BondAndStake] @derivedFrom(field: "account")
  unstakes: [UnbondAndUnstake] @derivedFrom(field: "account")
}

type AllClaimedReward @entity {
  id: ID!
  amount: Float!
  count: BigInt!
}

type BondAndStake @entity {
  id: ID! #blockHeight-eventIdx
  account: Account!
  contract: Contract!
  contractType: ContractType!
  amount: Float! #BalanceOf
  timestamp: Date!
}

type UnbondAndUnstake @entity {
  id: ID! #blockHeight-eventIdx
  account: Account!
  contract: Contract!
  contractType: ContractType!
  amount: Float! #BalanceOf
  timestamp: Date!
}